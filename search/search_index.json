{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hotdog/Not Hotdog Detector","text":"<p>If you've seen Silicon Valley, you must be familiar with this application designed by Jian Yang. We chose to implement the complete process of building and deploying the hotdog/nothotdog model as the project for our course DTU-MLOps. The primary goal of this project is to train a deep learning model that classifies images as either containing a hotdog or not. It's not a difficult task, but it's a good way for us to get familiar with the Machine Learning Operations.</p> <p></p> <p>Figure 1: Scene from the TV show \"Silicon Valley\".</p>"},{"location":"#visit-our-website-to-have-a-try","title":"Visit our website to have a try!","text":"<p>Here is the link of our website: Hotdog/notHotdog. We welcome everyone to use our application to identify hotdog. </p> <p>Figure 2: The website of our application.</p>"},{"location":"documents/api/","title":"API Documentation","text":""},{"location":"documents/api/#overview","title":"Overview","text":"<p>This API provides functionality for classifying images as <code>hotdog</code> or <code>not-hotdog</code>. The service loads a pre-trained model and performs predictions based on uploaded images.</p> <p>Request URL: <code>https://api-service-748263339953.europe-west1.run.app/</code></p> <p>Interactive URL <code>https://api-service-748263339953.europe-west1.run.app/docs</code></p>"},{"location":"documents/api/#endpoints","title":"Endpoints","text":""},{"location":"documents/api/#1-root-endpoint","title":"1. Root Endpoint","text":"<p>Description: Returns a basic message to confirm the API is running.</p> <ul> <li>Method: <code>GET</code></li> <li>URL: <code>/</code></li> </ul> <p>Example Request: <pre><code>curl -X 'GET' \\\n  'https://api-service-748263339953.europe-west1.run.app/' \\\n  -H 'accept: application/json'\n</code></pre> Response: <pre><code>{\n    \"message\": \"Image Classification API is running\"\n}\n</code></pre></p>"},{"location":"documents/api/#2-prediction-endpoint","title":"2. Prediction Endpoint","text":"<p>Description: Classifies an uploaded image as either <code>hotdog</code> or <code>not-hotdog</code>.</p> <ul> <li>Method: <code>POST</code></li> <li>URL: <code>/predict</code></li> <li>Headers:</li> <li><code>Content-Type: multipart/form-data</code></li> <li>Request Body:</li> <li><code>file</code> (required): The image file to classify. Must be <code>.jpg</code>, <code>.jpeg</code>, or <code>.png</code>.</li> </ul> <p>Example Request: <pre><code>curl -X 'POST' \\\n  'https://api-service-748263339953.europe-west1.run.app/predict' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: multipart/form-data' \\\n  -F 'data=@your_image.jpg;type=image/jpeg'\n</code></pre></p> <p>Response: <pre><code>{\n    \"category\": \"hotdog\",\n    \"probabilities\": 0.95\n}\n</code></pre> - <code>category</code>: The classification result (<code>hotdog</code> or <code>not-hotdog</code>). - <code>probabilities</code>: The confidence score for the prediction.</p> <p>Error Responses: - Invalid file format:   <pre><code>{\n    \"detail\": \"Invalid file format. Only JPG and PNG images are supported.\"\n}\n</code></pre> - Model not loaded:   <pre><code>{\n    \"detail\": \"Model is not loaded. Please try again later.\"\n}\n</code></pre> - Internal server error:   <pre><code>{\n    \"detail\": \"Error processing image: &lt;error_message&gt;\"\n}\n</code></pre></p>"},{"location":"documents/api/#3-health-check-endpoint","title":"3. Health Check Endpoint","text":"<p>Description: Checks the health status of the API and confirms if the model is loaded.</p> <ul> <li>Method: <code>GET</code></li> <li>URL: <code>/health</code></li> </ul> <p>Example Request <pre><code>curl -X 'GET' \\\n  'https://api-service-748263339953.europe-west1.run.app/health' \\\n  -H 'accept: application/json'\n</code></pre></p> <p>Response: <pre><code>{\n    \"status\": \"healthy\",\n    \"model_loaded\": true\n}\n</code></pre></p> <p>Error Response: Model not loaded: <pre><code>{\n    \"detail\": \"Model not loaded\"\n}\n</code></pre></p>"},{"location":"documents/contributing/","title":"Contributing to MLOps-project","text":"<p>Thank you for considering contributing to [Project Name]! This project is developed by Lin Zhu, Boyang Xu, and Wenji Xie as part of the DTU-MLOps (02476) course project. We welcome contributions from everyone and appreciate your time and effort to improve the project.</p> <p>Feel free to contact us through our GitHub homepage: https://github.com/ZhuMuMu0216/MLOps.</p>"},{"location":"documents/guide/","title":"Start our project on your local machine!","text":"<p>ATTENTION: Since we did lots of operations on the GCP(for example, downloading the pre-trained model from cloud storage), you also need to create your own GCP account and replace the project id, bucket name etc.</p>"},{"location":"documents/guide/#1-download-the-overall-project-files","title":"1. Download the overall project files","text":"<ol> <li> <p>Create your directory in your local machine.</p> </li> <li> <p>Folk our repository / Create the git file and clone our repository</p> <pre><code>git clone https://github.com/ZhuMuMu0216/MLOps.git\n</code></pre> </li> </ol>"},{"location":"documents/guide/#2-create-venv","title":"2. Create venv","text":"<ol> <li>Create the virtual environment     <pre><code>python -m venv venv       # create environment\n\nsource venv/bin/activate  # Linux/macOS\n.\\venv\\Scripts\\activate   # Windows\n\npip install .             # install all the packages\n</code></pre></li> </ol>"},{"location":"documents/guide/#3-download-the-dataset","title":"3. Download the dataset","text":"<ol> <li> <p>You should enter the <code>MLOps</code> directory.</p> </li> <li> <p>Run the below command in your terminal.     <pre><code>dvc pull\n</code></pre></p> </li> </ol>"},{"location":"documents/guide/#4-run-the-code-in-docker","title":"4. Run the code in docker","text":"<ol> <li> <p>You should enter the <code>MLOps</code> directory.</p> </li> <li> <p>Run the below command in your terminal, and you will build the docker image based on my dockerfile.</p> <p>```bash docker build -t train_image -f dockerfiles/train.dockerfile .</p> </li> <li> <p>Check your built docker image.     <pre><code>docker images\n</code></pre>     You will get below result and we can run the train_image now.</p> REPOSITORY TAG IMAGE ID CREATED SIZE train_image latest 311535037766 8 minutes ago 6.24GB </li> <li> <p>As we didn't COPY the data into our docker image, we dynamically mount the Host's <code>data</code> Directory to the Container's <code>/data</code>.     <pre><code>'''In Linux system'''\ndocker run -v $(pwd)/data:/data -it train_image\n\n'''In Windows Shell'''\ndocker run -v ${PWD}/data:/data -it train_image\n</code></pre></p> </li> <li> <p>Deploy the API     <pre><code>docker build -t api-service -f api.dockerfile .\ndocker run -d -p 8080:8080 api-service\n</code></pre>     You can access your API at http://localhost:8080</p> </li> </ol>"}]}